Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import expit  # sigmoid function

# Let's start by showing the problem with linear functions
def demonstrate_linear_problem():
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Linear network (just matrix multiplications)
    ax1.set_title('Linear Network (Without Activation Functions)', fontsize=14, fontweight='bold')
    
    # Show that multiple linear layers = single linear layer
    x = np.linspace(-3, 3, 100)
    
    # Layer 1: y1 = 2x
    y1 = 2 * x
    ax1.plot(x, y1, 'b-', linewidth=2, label='Layer 1: 2x')
    
    # Layer 2: y2 = 3 * y1 = 3 * 2x = 6x
    y2 = 3 * y1
    ax1.plot(x, y2, 'r-', linewidth=2, label='Layer 2: 3Ã—(2x) = 6x')
    
    # Equivalent single layer
    y_equivalent = 6 * x
    ax1.plot(x, y_equivalent, 'g--', linewidth=3, label='Equivalent: 6x', alpha=0.7)
    
    ax1.set_xlabel('Input')
    ax1.set_ylabel('Output')
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    ax1.text(0, 10, 'Multiple linear layers\n= Single linear layer!', 
             ha='center', fontsize=12, 
             bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7))
    
    # Non-linear network (with activation functions)
    ax2.set_title('Non-Linear Network (With Activation Functions)', fontsize=14, fontweight='bold')
    
    # Layer 1 with activation
    y1_nonlinear = np.tanh(2 * x)  # tanh activation
    ax2.plot(x, y1_nonlinear, 'b-', linewidth=2, label='Layer 1: tanh(2x)')
    
    # Layer 2 with activation  
    y2_nonlinear = np.tanh(3 * y1_nonlinear)
    ax2.plot(x, y2_nonlinear, 'r-', linewidth=2, label='Layer 2: tanh(3Ã—Layer1)')
    
    ax2.set_xlabel('Input')
    ax2.set_ylabel('Output')
    ax2.legend()
    ax2.grid(True, alpha=0.3)
    ax2.text(0, 0.5, 'Each layer adds\ncomplexity!', 
             ha='center', fontsize=12, 
             bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgreen", alpha=0.7))
    
    plt.tight_layout()
    plt.show()

demonstrate_linear_problem()

print("Key Insight: Without activation functions, deep networks are just expensive linear models!")
print("Activation functions introduce NON-LINEARITY, enabling complex pattern recognition.")
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 1[39m
[32m----> [39m[32m1[39m [38;5;28;01mimport[39;00m [34;01mnumpy[39;00m [38;5;28;01mas[39;00m [34;01mnp[39;00m
[32m      2[39m [38;5;28;01mimport[39;00m [34;01mmatplotlib[39;00m[34;01m.[39;00m[34;01mpyplot[39;00m [38;5;28;01mas[39;00m [34;01mplt[39;00m
[32m      3[39m [38;5;28;01mfrom[39;00m [34;01mscipy[39;00m[34;01m.[39;00m[34;01mspecial[39;00m [38;5;28;01mimport[39;00m expit  [38;5;66;03m# sigmoid function[39;00m

[31mModuleNotFoundError[39m: No module named 'numpy'

